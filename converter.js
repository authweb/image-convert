document.addEventListener('DOMContentLoaded', function () {
  const dropZone = document.getElementById('dropZone');
  const imageInput = document.getElementById('imageInput');
  const formatSelect = document.getElementById('formatSelect');
  const convertAllButton = document.getElementById('convertAllButton');
  const convertSelectedButton = document.getElementById('convertSelectedButton');
  const imageList = document.getElementById('imageList');
  const progressContainer = document.getElementById('progressContainer');
  const progressBar = document.getElementById('progressBar');
  const progressText = document.getElementById('progressText');
  const themeToggle = document.getElementById('themeToggle');

  let images = []; // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

  tailwind.config = {
    darkMode: 'class', // –ò—Å–ø–æ–ª—å–∑—É–µ–º class —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º—ã
  const savedTheme = localStorage.getItem('theme');
  if (!savedTheme) {
    // –ï—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const isSystemDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    if (isSystemDark) {
      document.documentElement.classList.add('dark'); // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å dark –∫ <html>
      themeToggle.textContent = '‚òÄÔ∏è';
    } else {
      document.documentElement.classList.remove('dark'); // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å dark
      themeToggle.textContent = 'üåô';
    }
  } else if (savedTheme === 'dark') {
    document.documentElement.classList.add('dark'); // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å dark
    themeToggle.textContent = '‚òÄÔ∏è';
  } else {
    document.documentElement.classList.remove('dark'); // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å dark
    themeToggle.textContent = 'üåô';
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
  themeToggle.addEventListener('click', function () {
    document.documentElement.classList.toggle('dark'); // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–ª–∞—Å—Å dark –Ω–∞ <html>
    if (document.documentElement.classList.contains('dark')) {
      localStorage.setItem('theme', 'dark');
      themeToggle.textContent = '‚òÄÔ∏è';
    } else {
      localStorage.setItem('theme', 'light');
      themeToggle.textContent = 'üåô';
    }
  });

  // Drag-and-drop
  dropZone.addEventListener('dragover', function (e) {
    e.preventDefault();
    dropZone.classList.add('drag-over');
  });

  dropZone.addEventListener('dragleave', function () {
    dropZone.classList.remove('drag-over');
  });

  dropZone.addEventListener('drop', function (e) {
    e.preventDefault();
    dropZone.classList.remove('drag-over');
    const files = e.dataTransfer.files;
    handleFiles(files);
  });

  // –í—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ input
  imageInput.addEventListener('change', function () {
    const files = imageInput.files;
    handleFiles(files);
  });

  // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  convertAllButton.addEventListener('click', function () {
    if (images.length === 0) {
      Swal.fire('–û—à–∏–±–∫–∞!', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.', 'error');
      return;
    }
    convertImages(images);
  });

  // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  convertSelectedButton.addEventListener('click', function () {
    const selectedImages = images.filter((img) => img.checked);
    if (selectedImages.length === 0) {
      Swal.fire('–û—à–∏–±–∫–∞!', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.', 'error');
      return;
    }
    convertImages(selectedImages);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  function handleFiles(files) {
    for (const file of files) {
      if (file.type.startsWith('image/')) {
        const reader = new FileReader();
        reader.onload = function (event) {
          const img = new Image();
          img.onload = function () {
            images.push({
              file,
              src: event.target.result,
              checked: true,
            });
            renderImageList();
          };
          img.src = event.target.result;
        };
        reader.readAsDataURL(file);
      } else {
        Swal.fire('–û—à–∏–±–∫–∞!', `–§–∞–π–ª "${file.name}" –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.`, 'error');
      }
    }
  }

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  function renderImageList() {
    imageList.innerHTML = images
      .map(
        (img, index) => `
					<div class="flex items-center gap-4 p-4 border border-gray-200 dark:border-gray-700 rounded-lg">
						<input type="checkbox" ${
              img.checked ? 'checked' : ''
            } onchange="toggleImage(${index})" class="form-checkbox h-5 w-5 text-blue-500">
						<img src="${img.src}" alt="Image" class="w-16 h-16 object-cover rounded-lg">
						<span class="text-gray-700 dark:text-gray-300">${img.file.name}</span>
						<button onclick="removeImage(${index})" class="ml-auto text-red-500 hover:text-red-700">–£–¥–∞–ª–∏—Ç—å</button>
					</div>
				`,
      )
      .join('');
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  window.toggleImage = function (index) {
    images[index].checked = !images[index].checked;
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  window.removeImage = function (index) {
    images.splice(index, 1);
    renderImageList();
  };

  // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  async function convertImages(imagesToConvert) {
    const format = formatSelect.value;
    const mimeType = `image/${format}`;

    progressContainer.classList.remove('hidden');
    progressBar.style.width = '0%';
    progressText.textContent = '0% –∑–∞–≤–µ—Ä—à–µ–Ω–æ';

    if (imagesToConvert.length > 5) {
      const zip = new JSZip();
      const folder = zip.folder('converted_images');

      for (let i = 0; i < imagesToConvert.length; i++) {
        const img = imagesToConvert[i];
        const dataURL = await convertImageToDataURL(img.src, mimeType);
        const blob = dataURLtoBlob(dataURL);
        folder.file(`image_${i + 1}.${format}`, blob);

        const progress = Math.round(((i + 1) / imagesToConvert.length) * 100);
        progressBar.style.width = `${progress}%`;
        progressText.textContent = `${progress}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ`;
      }

      zip.generateAsync({ type: 'blob' }).then(function (content) {
        saveAs(content, 'converted_images.zip');
        progressContainer.classList.add('hidden');
        Swal.fire('–ì–æ—Ç–æ–≤–æ!', '–ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ —Å–∫–∞—á–∞–Ω.', 'success');
      });
    } else {
      for (let i = 0; i < imagesToConvert.length; i++) {
        const img = imagesToConvert[i];
        const dataURL = await convertImageToDataURL(img.src, mimeType);
        const link = document.createElement('a');
        link.href = dataURL;
        link.download = `converted_${i + 1}.${format}`;
        link.click();

        const progress = Math.round(((i + 1) / imagesToConvert.length) * 100);
        progressBar.style.width = `${progress}%`;
        progressText.textContent = `${progress}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ`;
      }
      progressContainer.classList.add('hidden');
      Swal.fire('–ì–æ—Ç–æ–≤–æ!', '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã.', 'success');
    }
  }

  // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Data URL
  function convertImageToDataURL(src, mimeType) {
    return new Promise((resolve) => {
      const img = new Image();
      img.onload = function () {
        const canvas = document.createElement('canvas');
        canvas.width = img.width;
        canvas.height = img.height;
        const ctx = canvas.getContext('2d');
        ctx.drawImage(img, 0, 0);
        resolve(canvas.toDataURL(mimeType));
      };
      img.src = src;
    });
  }

  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Data URL –≤ Blob
  function dataURLtoBlob(dataURL) {
    const byteString = atob(dataURL.split(',')[1]);
    const mimeString = dataURL.split(',')[0].split(':')[1].split(';')[0];
    const ab = new ArrayBuffer(byteString.length);
    const ia = new Uint8Array(ab);
    for (let i = 0; i < byteString.length; i++) {
      ia[i] = byteString.charCodeAt(i);
    }
    return new Blob([ab], { type: mimeString });
  }
});
